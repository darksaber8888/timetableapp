trigger:
- main

pool:
  name: Default
  demands:
    - agent.name -equals self-hosted-agent

jobs:
- job: SetupEnvironment
  displayName: 'Setup Environment on Self-Managed Agent'
  pool:
    name: Default
    demands:
      - agent.name -equals self-hosted-agent

  steps:
  - script: |
      mkdir -p $(Agent.WorkFolder)/working_directory
    displayName: 'Create Working Directory'
  
  - task: DockerInstaller@0
    displayName: 'Install Docker'
    inputs:
      dockerVersion: 'latest'

  - script: |
      sudo apt-get install -y wget apt-transport-https gnupg lsb-release
      wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      sudo apt-get update
      sudo apt-get install -y trivy
    displayName: 'Install Trivy'

  - script: |
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    displayName: 'Install Azure CLI'

  - script: |
      az login --identity --username azure_mi
    displayName: 'Login to Azure'

  - task: Docker@2
    displayName: 'Login to Docker Hub'
    inputs:
      containerRegistry: 'docker_sc'
      command: 'login'

  - task: Docker@2
    displayName: 'Download Container Image'
    inputs:
      containerRegistry: 'docker_sc'
      repository: 'capstoneapp'
      command: 'pull'
      tags: 'latest'

  - script: |
      trivy image --ignore-unfixed --severity HIGH,CRITICAL,MEDIUM,LOW --format table --output $(Agent.WorkFolder)/trivy-report.txt <YourRepositoryName>:latest
    displayName: 'Scan Image with Trivy'

  - task: PublishTestResults@2
    displayName: 'Publish Trivy Scan Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Agent.WorkFolder)/trivy-report.txt'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
    condition: 'always()'

  - script: |
      az acr login --name capstoneapp --service-principal --username $(servicePrincipalId) --password $(servicePrincipalKey)
    displayName: 'Login to Azure Container Registry with Service Principal'
    env:
      servicePrincipalId: $(servicePrincipalId)
      servicePrincipalKey: $(servicePrincipalKey)

  - script: |
      docker tag <YourRepositoryName>:latest capstoneapp.azurecr.io/<YourRepositoryName>:v1
    displayName: 'Tag Docker Image'

  - script: |
      docker push capstoneapp.azurecr.io/<YourRepositoryName>:v1
    displayName: 'Push Docker Image to ACR'
