trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CmdLine@2
  inputs:
    script: |
      mkdir timetable
      cd timetable
      for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
      sudo apt-get update
      sudo apt-get install ca-certificates curl
      sudo install -m 0755 -d /etc/apt/keyrings
      sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      sudo chmod a+r /etc/apt/keyrings/docker.asc
      echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update
      sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      
- task: CmdLine@2
  inputs:
    script: |
      sudo apt install python3-pip
      sudo pip install flask
      sudo pip install tabulate
      sudo pip install datetime
- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_darksaber8888'
    repositoryName: 'darksaber8888/timtableapp'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'gitTag'
    tagPattern: 'v1'
    title: 'latest'
    isDraft: true
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'

# Step 3: Download dependencies
- script: |
    sudo apt-get update
    sudo apt-get install -y python3 python3-pip
    pip3 install flask tabulate
    sudo apt-get install -y docker.io
  displayName: 'Install dependencies'

# Step 4: Build Docker image
- script: |
    docker build -t timetable.app .
  displayName: 'Build Docker image'

- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'snyk_sc'
    testType: 'container'
    dockerImageName: 'timetable.app'
    dockerfilePath: '*/Dockerfile'
    severityThreshold: 'critical'
    monitorWhen: 'always'
    failOnIssues: true
    projectName: 'darksaber8888/timetable.app'
    organization: '78dbe9ea-e211-46bd-8621-0e14db09a67c'

# Step 6: Run container image scan
- script: |
    snyk test timetable.app --json > results.json
  displayName: 'Run container image scan'

# Step 7: Create and write results to file
- script: |
    cat results.json > results.txt
  displayName: 'Write scan results to file'


